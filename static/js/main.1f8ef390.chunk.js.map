{"version":3,"sources":["constants/countdownTime.js","components/Header/index.js","components/Layout/index.js","components/Loader/index.js","images/anandagandha-sm-copy.png","images/kailaasa-flag-triangular-2019-compressed.png","constants/categories.js","constants/numOfQuestions.js","utils/calculateGrade.js","utils/calculateScore.js","utils/getLetter.js","utils/shuffle.js","utils/timeConverter.js","components/Offline/index.js","components/Main/index.js","components/Countdown/index.js","components/Quiz/index.js","components/ShareButton/index.js","components/Result/Stats.js","components/Result/QNA.js","components/Result/index.js","components/App/index.js","serviceWorkerRegistration.js","index.js"],"names":["Header","useState","promptEvent","setPromptEvent","appAccepted","setAppAccepted","isAppInstalled","window","matchMedia","matches","addEventListener","e","preventDefault","Menu","divided","stackable","size","style","Item","header","color","position","Button","icon","labelPosition","content","onClick","prompt","userChoice","then","result","outcome","console","log","Layout","children","Loader","Container","Message","Icon","name","loading","Content","MAJORS","key","text","value","COUNTDOWN_TIME","hours","minutes","seconds","i","push","NUM_OF_QUESTIONS","calculateGrade","score","undefined","percentage","parseInt","grade","remarks","calculateScore","totalQuestions","correctAnswers","Number","toFixed","getLetter","number","letter","shuffle","array","length","j","Math","floor","random","timeConverter","milliseconds","slice","Offline","location","reload","Segment","placeholder","role","aria-label","Main","startQuiz","major","setMajor","numOfQuestions","difficulty","questionsType","countdownTime","processing","setProcessing","error","setError","offline","setOffline","allFieldsSelected","Grid","columns","divide","Row","Column","Image","verticalAlign","src","img","textAlign","anandagandha","floated","Group","onDismiss","message","Meta","Description","vertical","fluid","map","ele","active","marginRight","Divider","Extra","primary","api","fetch","respone","json","data","setTimeout","forEach","element","options","answers","catch","navigator","onLine","disabled","Countdown","timeOver","setTimeTaken","totalTime","timerTime","setTimerTime","useEffect","timer","setInterval","newTime","clearInterval","Swal","fire","title","willClose","basic","Popup","trigger","Quiz","endQuiz","questionIndex","setQuestionIndex","setCorrectAnswers","userSlectedAns","setUserSlectedAns","questionsAndAnswers","setQuestionsAndAnswers","timeTaken","handleItemClick","as","block","floating","he","decode","question","option","decodedOption","_id","point","res","correct_answer","qna","user_answer","handleNext","ShareButton","share","circular","document","url","Modal","closeIcon","className","href","target","rel","marginBottom","Stats","replayQuiz","resetQuiz","marginTop","QNA","Table","celled","striped","selectable","HeaderCell","Body","item","Cell","Result","activeTab","setActiveTab","handleTabClick","widths","App","setLoading","setData","setCountdownTime","isQuizStarted","setIsQuizStarted","isQuizCompleted","setIsQuizCompleted","resultData","setResultData","shuffledData","isLocalhost","Boolean","hostname","match","registerValidSW","swUrl","config","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","onUpdate","toast","showConfirmButton","onSuccess","ReactDOM","render","StrictMode","getElementById","URL","process","origin","headers","response","contentType","get","status","indexOf","ready","unregister","checkValidServiceWorker","serviceWorkerRegistration"],"mappings":"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","file":"static/js/main.1f8ef390.chunk.js","sourcesContent":["const COUNTDOWN_TIME = {\n  hours: [],\n  minutes: [],\n  seconds: []\n};\n\nfor (let i = 0; i < 100; i++) {\n  COUNTDOWN_TIME.hours.push({ key: i, text: i, value: i * 60 * 60 });\n}\n\nfor (let i = 0; i < 60; i++) {\n  COUNTDOWN_TIME.minutes.push({ key: i, text: i, value: i * 60 });\n}\n\nfor (let i = 0; i < 60; i++) {\n  COUNTDOWN_TIME.seconds.push({ key: i, text: i, value: i });\n}\n\nexport default COUNTDOWN_TIME;\n","import React, { useState } from 'react';\nimport { Menu, Button } from 'semantic-ui-react';\n\nconst Header = () => {\n  const [promptEvent, setPromptEvent] = useState(null);\n  const [appAccepted, setAppAccepted] = useState(false);\n\n  let isAppInstalled = false;\n\n  if (window.matchMedia('(display-mode: standalone)').matches || appAccepted) {\n    isAppInstalled = true;\n  }\n\n  window.addEventListener('beforeinstallprompt', e => {\n    e.preventDefault();\n    setPromptEvent(e);\n  });\n\n  const installApp = () => {\n    promptEvent.prompt();\n    promptEvent.userChoice.then(result => {\n      if (result.outcome === 'accepted') {\n        setAppAccepted(true);\n        console.log('User accepted the A2HS prompt');\n      } else {\n        console.log('User dismissed the A2HS prompt');\n      }\n    });\n  };\n\n  return (\n    <Menu divided stackable size=\"massive\" style={{ 'background': '#570E0E' }}>\n      <Menu.Item header style={{ 'background': '#570E0E' }}>\n        <h1 style={{ color: 'white' }}>KET</h1>\n      </Menu.Item>\n      <Menu.Item header style={{ 'background': '#570E0E' }}>\n        <h2 style={{ color: 'white' }}>-&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Kailasa&nbsp;eligiblity&nbsp;test</h2>\n      </Menu.Item>\n\n\n\n      {promptEvent && !isAppInstalled && (\n        <Menu.Item position=\"right\">\n          <Button\n            color=\"teal\"\n            icon=\"cloud download\"\n            labelPosition=\"left\"\n            content=\"Install App\"\n            onClick={installApp}\n          />\n        </Menu.Item>\n      )}\n    </Menu >\n  );\n};\n\nexport default Header;\n","import React, { Fragment } from 'react';\nimport PropTypes from 'prop-types';\n\nimport Header from '../Header';\n\nconst Layout = ({ children }) => {\n  return (\n    <Fragment>\n      <Header />\n      <main>{children}</main>\n    </Fragment>\n  );\n};\n\nLayout.propTypes = {\n  children: PropTypes.node\n};\n\nexport default Layout;\n","import React from 'react';\nimport { Container, Message, Icon } from 'semantic-ui-react';\n\nconst Loader = () => {\n  return (\n    <Container>\n      <Message icon size=\"big\">\n        <Icon name=\"circle notched\" loading />\n        <Message.Content>\n          <Message.Header>Just one second</Message.Header>\n          We are fetching that content for you.\n        </Message.Content>\n      </Message>\n    </Container>\n  );\n};\n\nexport default Loader;\n","export default __webpack_public_path__ + \"static/media/anandagandha-sm-copy.debb8840.png\";","export default __webpack_public_path__ + \"static/media/kailaasa-flag-triangular-2019-compressed.b6011790.png\";","const MAJORS = [\n  {\n    key: '0',\n    text: 'Hindu Philosophy',\n    value: 'hinduPhilosophy'\n  },\n  {\n    key: '1',\n    text: 'Hindu History',\n    value: 'hinduHistory'\n  },\n  {\n    key: '2',\n    text: 'Hindu identity',\n    value: 'hinduIdentity'\n  },\n  {\n    key: '3',\n    text: 'Know your Nation',\n    value: 'knowYourNation'\n  },\n];\n\nexport default MAJORS;\n","const NUM_OF_QUESTIONS = [];\n\nfor (let i = 1; i <= 50; i++) {\n  NUM_OF_QUESTIONS.push({ key: i, text: i, value: i });\n}\n\nexport default NUM_OF_QUESTIONS;\n","const calculateGrade = score => {\n\n  if ( score === null || score === undefined || typeof score !== 'number' ) {\n    return null;\n  }\n\n  const percentage = parseInt(score);\n\n  let grade = null;\n  let remarks = null;\n\n  if (percentage >= 97) {\n    grade = 'A+';\n  } else if (percentage >= 93 && percentage <= 96) {\n    grade = 'A';\n  } else if (percentage >= 90 && percentage <= 92) {\n    grade = 'A-';\n  } else if (percentage >= 87 && percentage <= 89) {\n    grade = 'B+';\n  } else if (percentage >= 83 && percentage <= 86) {\n    grade = 'B';\n  } else if (percentage >= 80 && percentage <= 82) {\n    grade = 'B-';\n  } else if (percentage >= 77 && percentage <= 79) {\n    grade = 'C+';\n  } else if (percentage >= 73 && percentage <= 76) {\n    grade = 'C';\n  } else if (percentage >= 70 && percentage <= 72) {\n    grade = 'C-';\n  } else if (percentage >= 67 && percentage <= 69) {\n    grade = 'D+';\n  } else if (percentage >= 63 && percentage <= 66) {\n    grade = 'D';\n  } else if (percentage >= 60 && percentage <= 62) {\n    grade = 'D-';\n  } else if (percentage < 60) {\n    grade = 'F';\n  }\n\n  if (score >= 60) {\n    remarks = 'Congratulations, YOU PASSED!';\n  } else {\n    remarks = 'Sorry, YOU FAILED!';\n  }\n\n  return {\n    grade,\n    remarks\n  };\n};\n\nexport default calculateGrade;\n","const calculateScore = (totalQuestions, correctAnswers) => {\n  if ( totalQuestions === 0 ) {\n    return 0\n  }\n  return Number(((correctAnswers * 100) / totalQuestions).toFixed(2));\n};\n\nexport default calculateScore;\n","const getLetter = number => {\n  let letter;\n\n  switch (number) {\n    case 0:\n      letter = 'A.';\n      break;\n    case 1:\n      letter = 'B.';\n      break;\n    case 2:\n      letter = 'C.';\n      break;\n    case 3:\n      letter = 'D.';\n      break;\n    default:\n      letter = null;\n      break;\n  }\n\n  return letter;\n};\n\nexport default getLetter;\n","const shuffle = array => {\n  array = [...array];\n\n  for (let i = array.length - 1; i > 0; i--) {\n    const j = Math.floor(Math.random() * (i + 1));\n    [array[i], array[j]] = [array[j], array[i]];\n  }\n\n  return array;\n};\n\nexport default shuffle;\n","const timeConverter = milliseconds => {\n  if ( milliseconds === null || milliseconds === undefined || typeof milliseconds !== 'number' ) {\n    return null;\n  }\n  const hours = `0${Math.floor(milliseconds / 3600000)}`.slice(-2);\n  const minutes = `0${Math.floor((milliseconds / 60000) % 60)}`.slice(-2);\n  const seconds = `0${Math.floor((milliseconds / 1000) % 60) % 60}`.slice(-2);\n\n  return {\n    hours,\n    minutes,\n    seconds\n  };\n};\n\nexport default timeConverter;\n","import React from 'react';\nimport { Container, Segment, Header, Icon } from 'semantic-ui-react';\n\nconst Offline = () => {\n  window.addEventListener('online', () => window.location.reload());\n\n  return (\n    <Container>\n      <Segment placeholder>\n        <Header icon>\n          <Icon name=\"unlink\" />\n          <h1>Offline</h1>\n          <p>\n            There is no Internet connection. We'll try to reload automatically\n            once you're back online!{' '}\n            <span role=\"img\" aria-label=\"signal\">\n              📶\n            </span>\n          </p>\n        </Header>\n      </Segment>\n    </Container>\n  );\n};\n\nexport default Offline;\n","import React, { useState } from 'react';\nimport PropTypes from 'prop-types';\nimport {\n  Container,\n  Segment,\n  Item,\n  Divider,\n  Button,\n  Message,\n  Menu,\n  Image,\n  Grid\n} from 'semantic-ui-react';\n\n\nimport anandagandha from '../../images/anandagandha-sm-copy.png'\nimport img from '../../images/kailaasa-flag-triangular-2019-compressed.png'\n\nimport {\n  MAJORS,\n} from '../../constants';\nimport { shuffle } from '../../utils';\n\nimport Offline from '../Offline';\n\nconst Main = ({ startQuiz }) => {\n  const [major, setMajor] = useState({ value: null, text: null });\n  const [numOfQuestions, setNumOfQuestions] = useState(5);\n  const [difficulty, setDifficulty] = useState('0');\n  const [questionsType, setQuestionsType] = useState('0');\n  const [countdownTime, setCountdownTime] = useState({\n    hours: 0,\n    minutes: 120,\n    seconds: 0,\n  });\n  const [processing, setProcessing] = useState(false);\n  const [error, setError] = useState(null);\n  const [offline, setOffline] = useState(false);\n\n  const handleTimeChange = (e, { name, value }) => {\n    setCountdownTime({ ...countdownTime, [name]: value });\n  };\n\n  let allFieldsSelected = false;\n  if (\n    major.value &&\n    numOfQuestions &&\n    difficulty &&\n    questionsType &&\n    (countdownTime.hours || countdownTime.minutes || countdownTime.seconds)\n  ) {\n    allFieldsSelected = true;\n  }\n\n  const fetchData = () => {\n    setProcessing(true);\n    if (error) setError(null);\n\n    //TODO: change API end point to secure API validating token and generate questioner \n    // 1. Hindu  Philosophy\n    // 2. Hindu History \n    // 3. Hindu identity \n    // 4. Know your nation\n\n    // 25 mcq objectives (1 mark)/\n    // 10 application (2 marks each) \n    // 1 social media activity (5 marks)\n    // types : mcq, application, activity\n    // const API = `https://opentdb.com/api.php?amount=${numOfQuestions}&category=${major.value}&difficulty=${difficulty}&type=${questionsType}`;\n\n    const api = 'https://kerserver.onrender.com/' + major.value;\n    fetch(api)\n      .then(respone => respone.json())\n      .then(data =>\n        setTimeout(() => {\n          // const { response_code, results } = data;\n          data.forEach(element => {\n            element.options = shuffle([\n              ...element.answers,\n            ]);\n          });\n          setProcessing(false);\n          startQuiz(\n            data,\n            countdownTime.hours * 60 * 60 + countdownTime.minutes * 60 + countdownTime.seconds,\n            major\n          );\n        }, 1000)\n      )\n      .catch(error =>\n        setTimeout(() => {\n          if (!navigator.onLine) {\n            setOffline(true);\n          } else {\n            setProcessing(false);\n            setError(error);\n          }\n        }, 1000)\n      );\n  };\n\n  if (offline) return <Offline />;\n  return (\n    <Container>\n      <Segment>\n        <Grid columns={3} divide>\n          <Grid.Row>\n            <Grid.Column key={1}><Image size=\"medium\" verticalAlign=\"middle\" src={img} /></Grid.Column>\n            <Grid.Column key={2} textAlign=\"center\" verticalAlign=\"middle\"><h2>Majors</h2></Grid.Column>\n            <Grid.Column key={3}><Image size=\"small\" verticalAlign=\"middle\" src={anandagandha} floated=\"right\" /></Grid.Column>\n          </Grid.Row>\n        </Grid>\n      </Segment>\n\n      <Segment>\n        <Item.Group divided>\n          <Item>\n            <Item.Content>\n              {error && (\n                <Message error onDismiss={() => setError(null)}>\n                  <Message.Header>Error!</Message.Header>\n                  {error.message}\n                </Message>\n              )}\n              <Item.Meta>\n                <br />\n                <Item.Description>\n                  <h3>Please choose a major to start, complete all the majors</h3>\n                </Item.Description>\n                <Menu vertical fluid size=\"massive\">\n                  {MAJORS.map((ele, i) => {\n                    return (\n                      <Menu.Item\n                        key={i}\n                        name={ele.text}\n                        active={major.value === ele.value}\n                        onClick={() => { setMajor(ele) }}>\n                        <b style={{ marginRight: '8px' }}>{i + 1}. </b>\n                        {ele.text}\n                      </Menu.Item>\n                    );\n                  })}\n                </Menu>\n              </Item.Meta>\n              <Divider />\n              <Divider />\n              <Item.Extra>\n                <Button\n                  primary\n                  size=\"big\"\n                  icon=\"play\"\n                  labelPosition=\"left\"\n                  content={processing ? 'Processing...' : 'Start Now'}\n                  onClick={fetchData}\n                  disabled={!allFieldsSelected || processing}\n                />\n              </Item.Extra>\n            </Item.Content>\n          </Item>\n        </Item.Group>\n      </Segment>\n      <br />\n    </Container>\n  );\n};\n\nMain.propTypes = {\n  startQuiz: PropTypes.func.isRequired,\n};\n\nexport default Main;\n","import React, { useState, useEffect } from 'react';\nimport PropTypes from 'prop-types';\nimport { Button, Popup } from 'semantic-ui-react';\nimport Swal from 'sweetalert2';\n\nimport { timeConverter } from '../../utils';\n\nconst Countdown = ({ countdownTime, timeOver, setTimeTaken }) => {\n  const totalTime = countdownTime * 1000;\n  const [timerTime, setTimerTime] = useState(totalTime);\n  const { hours, minutes, seconds } = timeConverter(timerTime);\n\n  useEffect(() => {\n    const timer = setInterval(() => {\n      const newTime = timerTime - 1000;\n\n      if (newTime >= 0) {\n        setTimerTime(newTime);\n      } else {\n        clearInterval(timer);\n\n        Swal.fire({\n          title: `Your Time's Up`,\n          icon: 'info',\n          timer: 5000,\n          willClose: () => timeOver(totalTime - timerTime)\n        });\n      }\n    }, 1000);\n\n    return () => {\n      clearInterval(timer);\n      setTimeTaken(totalTime - timerTime + 1000);\n    };\n\n    // eslint-disable-next-line\n  }, [timerTime]);\n\n  return (\n    <Button.Group size=\"massive\" basic floated=\"right\">\n      <Popup\n        content=\"Hours\"\n        trigger={<Button active>{hours}</Button>}\n        position=\"bottom left\"\n      />\n      <Popup\n        content=\"Minutes\"\n        trigger={<Button active>{minutes}</Button>}\n        position=\"bottom left\"\n      />\n      <Popup\n        content=\"Seconds\"\n        trigger={<Button active>{seconds}</Button>}\n        position=\"bottom left\"\n      />\n    </Button.Group>\n  );\n};\n\nCountdown.propTypes = {\n  countdownTime: PropTypes.number.isRequired,\n  timeOver: PropTypes.func.isRequired,\n  setTimeTaken: PropTypes.func.isRequired\n};\n\nexport default Countdown;\n","import React, { useState } from 'react';\nimport PropTypes from 'prop-types';\nimport {\n  Container,\n  Segment,\n  Item,\n  Divider,\n  Button,\n  Image,\n  Grid,\n  Icon,\n  Message,\n  Menu,\n  Header\n} from 'semantic-ui-react';\n\nimport he from 'he';\n\nimport Countdown from '../Countdown';\nimport { getLetter } from '../../utils';\nimport img from '../../images/kailaasa-flag-triangular-2019-compressed.png';\nimport anandagandha from '../../images/anandagandha-sm-copy.png'\n\n\n\nconst Quiz = ({ data, countdownTime, endQuiz, major }) => {\n\n\n  const [questionIndex, setQuestionIndex] = useState(0);\n  const [correctAnswers, setCorrectAnswers] = useState(0);\n  const [userSlectedAns, setUserSlectedAns] = useState(null);\n  const [questionsAndAnswers, setQuestionsAndAnswers] = useState([]);\n  const [timeTaken, setTimeTaken] = useState(null);\n\n  const handleItemClick = (e, { name }) => {\n    setUserSlectedAns(name);\n  };\n\n\n  const handleNext = (_id) => {\n    let point = 0;\n    const api = 'https://kerserver.onrender.com/' + major.value + '/' + _id;\n    fetch(api)\n      .then(respone => {\n        return respone.json().then(res => {\n          if (res.correct_answer === userSlectedAns) point = 1;\n\n          const qna = questionsAndAnswers;\n          qna.push({\n            question: he.decode(data[questionIndex].question),\n            user_answer: userSlectedAns,\n            correct_answer: res.correct_answer,\n            point\n          });\n\n          if (questionIndex === data.length - 1) {\n            return endQuiz({\n              totalQuestions: data.length,\n              correctAnswers: correctAnswers + point,\n              timeTaken,\n              questionsAndAnswers: qna\n            });\n          }\n\n          setCorrectAnswers(correctAnswers + point);\n          setQuestionIndex(questionIndex + 1);\n          setUserSlectedAns(null);\n          setQuestionsAndAnswers(qna);\n        })\n      })\n  };\n\n  const timeOver = timeTaken => {\n    return endQuiz({\n      totalQuestions: data.length,\n      correctAnswers,\n      timeTaken,\n      questionsAndAnswers\n    });\n  };\n\n  // const [questionIndex, setQuestionIndex] = useState(0);\n  // const [correctAnswers, setCorrectAnswers] = useState(0);\n  // const [userSlectedAns, setUserSlectedAns] = useState(null);\n  // const [questionsAndAnswers, setQuestionsAndAnswers] = useState([]);\n  // const [timeTaken, setTimeTaken] = useState(null);\n  // const [offline, setOffline] = useState(false);\n\n\n  // const [processing, setProcessing] = useState(false);\n  // const [error, setError] = useState(null);\n\n  // const handleItemClick = (e, { name }) => {\n  //   setUserSlectedAns(name);\n  // };\n\n  // const handleNext = (_id) => {\n  //   let point = 0;\n  //   setProcessing(true);\n  //   if (error) setError(null);\n  //   let qna;\n  //   const api = 'http://localhost:5050/' + major.value + '/' + _id;\n  //   fetch(api)\n  //     .then(respone => {\n  //       return respone.json().then(res => {\n  //         point = res.correct_answer === userSlectedAns ? 1 : 0;\n  //         qna = [...questionsAndAnswers, {\n  //           question: he.decode(data[questionIndex].question),\n  //           user_answer: userSlectedAns,\n  //           correct_answer: res.correct_answer,\n  //           point\n  //         }];\n  //         setQuestionsAndAnswers(qna);\n  //         setCorrectAnswers(correctAnswers + point);\n  //         setUserSlectedAns(null);\n  //         setProcessing(false);\n  //       }).then(() => {\n  //         setQuestionIndex(questionIndex + 1, () => {\n  //           if (questionIndex === data.length - 1) {\n  //             return endQuiz({\n  //               totalQuestions: data.length,\n  //               correctAnswers: correctAnswers,\n  //               timeTaken,\n  //               questionsAndAnswers,\n  //             });\n  //           }\n  //         });\n  //       })\n  //     }).catch(error =>\n  //       setTimeout(() => {\n  //         if (!navigator.onLine) {\n  //           setOffline(true);\n  //         } else {\n  //           setProcessing(false);\n  //           setError(error);\n  //         }\n  //       }, 1000)\n  //     );\n  // };\n\n  // if (questionIndex === data.length - 1) {\n  //   return endQuiz({\n  //     totalQuestions: data.length,\n  //     correctAnswers: correctAnswers,\n  //     timeTaken,\n  //     questionsAndAnswers,\n  //   });\n  // }\n\n  // const timeOver = timeTaken => {\n  //   return endQuiz({\n  //     totalQuestions: data.length,\n  //     correctAnswers,\n  //     timeTaken,\n  //     questionsAndAnswers\n  //   });\n  // };\n\n\n\n  return (\n    <Item.Header>\n      <Container>\n        <Segment>\n          <Grid columns={3} divide>\n            <Grid.Row>\n              <Grid.Column key={1}><Image size=\"medium\" verticalAlign=\"middle\" src={img} /></Grid.Column>\n              <Grid.Column key={2} textAlign=\"center\" verticalAlign=\"middle\"><h2>{major.text}</h2></Grid.Column>\n              <Grid.Column key={3}><Image size=\"small\" src={anandagandha} floated=\"right\" /></Grid.Column>\n            </Grid.Row>\n          </Grid>\n        </Segment>\n        <Segment>\n          <Item.Group divided>\n            <Item>\n              <Item.Content>\n                <Item.Extra>\n                  <Header as=\"h1\" block floated=\"left\">\n                    <Icon name=\"info circle\" />\n                    <Header.Content>\n                      {`Question No.${questionIndex + 1} of ${data.length}`}\n                    </Header.Content>\n                  </Header>\n                  <Countdown\n                    countdownTime={countdownTime}\n                    timeOver={timeOver}\n                    setTimeTaken={setTimeTaken}\n                  />\n                </Item.Extra>\n                <br />\n                <Item.Meta>\n                  <Message size=\"huge\" floating>\n                    <b>{`Q. ${he.decode(data[questionIndex].question)}`}</b>\n                  </Message>\n                  <br />\n                  <Item.Description>\n                    <h3>Please choose one of the following answers:</h3>\n                  </Item.Description>\n                  <Divider />\n                  <Menu vertical fluid size=\"massive\">\n                    {data[questionIndex].options.map((option, i) => {\n                      const letter = getLetter(i);\n                      const decodedOption = he.decode(option);\n                      return (\n                        <Menu.Item\n                          key={decodedOption}\n                          name={decodedOption}\n                          active={userSlectedAns === decodedOption}\n                          onClick={handleItemClick}\n                        >\n                          <b style={{ marginRight: '8px' }}>{letter}</b>\n                          {decodedOption}\n                        </Menu.Item>\n                      );\n                    })}\n                  </Menu>\n                </Item.Meta>\n                <Divider />\n                <Item.Extra>\n                  <Button\n                    primary\n                    content=\"Next\"\n                    onClick={() => handleNext(he.decode(data[questionIndex]._id))}\n                    floated=\"right\"\n                    size=\"big\"\n                    icon=\"right chevron\"\n                    labelPosition=\"right\"\n                    disabled={!userSlectedAns}\n                  />\n                </Item.Extra>\n              </Item.Content>\n            </Item>\n          </Item.Group>\n        </Segment>\n        <br />\n      </Container>\n    </Item.Header>\n  );\n};\n\nQuiz.propTypes = {\n  data: PropTypes.array.isRequired,\n  countdownTime: PropTypes.number.isRequired,\n  endQuiz: PropTypes.func.isRequired\n};\n\nexport default Quiz;\n","import React, { Fragment } from 'react';\nimport { Button, Icon, Modal } from 'semantic-ui-react';\n\nconst ShareButton = () => {\n  const handleClick = () => {\n    navigator\n      .share({\n        title: document.title,\n        text: 'Check out this quiz app — it rocks!',\n        url: 'https://safdarjamal.github.io/quiz-app/'\n      })\n      .then(() => console.log('Successfully shared'))\n      .catch(error => console.log(error.message));\n  };\n\n  return (\n    <Fragment>\n      {navigator.share ? (\n        <Button\n          title=\"Share\"\n          floated=\"right\"\n          size=\"big\"\n          circular\n          icon=\"share alternate\"\n          onClick={handleClick}\n        />\n      ) : (\n        <Modal\n          closeIcon\n          size=\"tiny\"\n          trigger={\n            <Button\n              title=\"Share\"\n              floated=\"right\"\n              size=\"big\"\n              circular\n              icon=\"share alternate\"\n            />\n          }\n        >\n          <Modal.Header className=\"ui center aligned\">Share on</Modal.Header>\n          <Modal.Content className=\"ui center aligned container\">\n            <a\n              href=\"https://www.facebook.com/sharer.php?u=https%3A//safdarjamal.github.io/quiz-app/\"\n              target=\"_blank\"\n              rel=\"noopener noreferrer\"\n            >\n              <Button color=\"facebook\" size=\"big\" style={{ marginBottom: 8 }}>\n                <Icon name=\"facebook\" />\n                Facebook\n              </Button>\n            </a>\n            <a\n              href=\"https://twitter.com/intent/tweet?url=https%3A//safdarjamal.github.io/quiz-app/&text=Check%20out%20this%20quiz%20app%20—%20it%20rocks!&via=_safdarjamal\"\n              target=\"_blank\"\n              rel=\"noopener noreferrer\"\n            >\n              <Button color=\"twitter\" size=\"big\" style={{ marginBottom: 8 }}>\n                <Icon name=\"twitter\" />\n                Twitter\n              </Button>\n            </a>\n            <a\n              href=\"https://www.linkedin.com/shareArticle?mini=true&url=https%3A%2F%2Fsafdarjamal.github.io%2Fquiz-app%2F\"\n              target=\"_blank\"\n              rel=\"noopener noreferrer\"\n            >\n              <Button color=\"linkedin\" size=\"big\">\n                <Icon name=\"linkedin\" />\n                LinkedIn\n              </Button>\n            </a>\n          </Modal.Content>\n        </Modal>\n      )}\n    </Fragment>\n  );\n};\n\nexport default ShareButton;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { Segment, Header, Button } from 'semantic-ui-react';\n\nimport ShareButton from '../ShareButton';\nimport { calculateScore, calculateGrade, timeConverter } from '../../utils';\n\nconst Stats = ({\n  totalQuestions,\n  correctAnswers,\n  timeTaken,\n  replayQuiz,\n  resetQuiz\n}) => {\n  const score = calculateScore(totalQuestions, correctAnswers);\n  const { grade, remarks } = calculateGrade(score);\n  const { hours, minutes, seconds } = timeConverter(timeTaken);\n\n  return (\n    <Segment>\n      <Header as=\"h1\" textAlign=\"center\" block>\n        {remarks}\n      </Header>\n      <Header as=\"h2\" textAlign=\"center\" block>\n        Grade: {grade}\n      </Header>\n      <Header as=\"h3\" textAlign=\"center\" block>\n        Total Questions: {totalQuestions}\n      </Header>\n      <Header as=\"h3\" textAlign=\"center\" block>\n        Correct Answers: {correctAnswers}\n      </Header>\n      <Header as=\"h3\" textAlign=\"center\" block>\n        Your Score: {score}%\n      </Header>\n      <Header as=\"h3\" textAlign=\"center\" block>\n        Passing Score: 60%\n      </Header>\n      <Header as=\"h3\" textAlign=\"center\" block>\n        Time Taken:{' '}\n        {`${Number(hours)}h ${Number(minutes)}m ${Number(seconds)}s`}\n      </Header>\n      <div style={{ marginTop: 35 }}>\n        <Button\n          primary\n          content=\"Play Again\"\n          onClick={replayQuiz}\n          size=\"big\"\n          icon=\"redo\"\n          labelPosition=\"left\"\n          style={{ marginRight: 15, marginBottom: 8 }}\n        />\n        <Button\n          color=\"teal\"\n          content=\"Back to Home\"\n          onClick={resetQuiz}\n          size=\"big\"\n          icon=\"home\"\n          labelPosition=\"left\"\n          style={{ marginBottom: 8 }}\n        />\n        <ShareButton />\n      </div>\n    </Segment>\n  );\n};\n\nStats.propTypes = {\n  totalQuestions: PropTypes.number.isRequired,\n  correctAnswers: PropTypes.number.isRequired,\n  timeTaken: PropTypes.number.isRequired,\n  replayQuiz: PropTypes.func.isRequired,\n  resetQuiz: PropTypes.func.isRequired\n};\n\nexport default Stats;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { Table } from 'semantic-ui-react';\n\nconst QNA = ({ questionsAndAnswers }) => {\n  return (\n    <Table celled striped selectable size=\"large\">\n      <Table.Header>\n        <Table.Row>\n          <Table.HeaderCell>No.</Table.HeaderCell>\n          <Table.HeaderCell>Questions</Table.HeaderCell>\n          <Table.HeaderCell>Your Answers</Table.HeaderCell>\n          <Table.HeaderCell>Correct Answers</Table.HeaderCell>\n          <Table.HeaderCell>Points</Table.HeaderCell>\n        </Table.Row>\n      </Table.Header>\n      <Table.Body>\n        {questionsAndAnswers.map((item, i) => (\n          <Table.Row key={i + 1}>\n            <Table.Cell>{i + 1}</Table.Cell>\n            <Table.Cell>{item.question}</Table.Cell>\n            <Table.Cell>{item.user_answer}</Table.Cell>\n            <Table.Cell>{item.correct_answer}</Table.Cell>\n            <Table.Cell>{item.point}</Table.Cell>\n          </Table.Row>\n        ))}\n      </Table.Body>\n    </Table>\n  );\n};\n\nQNA.propTypes = {\n  questionsAndAnswers: PropTypes.array.isRequired\n};\n\nexport default QNA;\n","import React, { useState } from 'react';\nimport PropTypes from 'prop-types';\nimport { Container, Menu } from 'semantic-ui-react';\n\nimport Stats from './Stats';\nimport QNA from './QNA';\n\nconst Result = ({\n  totalQuestions,\n  correctAnswers,\n  timeTaken,\n  questionsAndAnswers,\n  replayQuiz,\n  resetQuiz\n}) => {\n  const [activeTab, setActiveTab] = useState('Stats');\n\n  const handleTabClick = (e, { name }) => {\n    setActiveTab(name);\n  };\n\n  return (\n    <Container>\n      <Menu fluid widths={2}>\n        <Menu.Item\n          name=\"Stats\"\n          active={activeTab === 'Stats'}\n          onClick={handleTabClick}\n        />\n        <Menu.Item\n          name=\"QNA\"\n          active={activeTab === 'QNA'}\n          onClick={handleTabClick}\n        />\n      </Menu>\n      {activeTab === 'Stats' && (\n        <Stats\n          totalQuestions={totalQuestions}\n          correctAnswers={correctAnswers}\n          timeTaken={timeTaken}\n          replayQuiz={replayQuiz}\n          resetQuiz={resetQuiz}\n        />\n      )}\n      {activeTab === 'QNA' && <QNA questionsAndAnswers={questionsAndAnswers} />}\n      <br />\n    </Container>\n  );\n};\n\nResult.propTypes = {\n  totalQuestions: PropTypes.number.isRequired,\n  correctAnswers: PropTypes.number.isRequired,\n  timeTaken: PropTypes.number.isRequired,\n  questionsAndAnswers: PropTypes.array.isRequired,\n  replayQuiz: PropTypes.func.isRequired,\n  resetQuiz: PropTypes.func.isRequired\n};\n\nexport default Result;\n","import React, { useState } from 'react';\n\nimport Layout from '../Layout';\nimport Loader from '../Loader';\nimport Main from '../Main';\nimport Quiz from '../Quiz';\nimport Result from '../Result';\n\nimport { shuffle } from '../../utils';\n\nconst App = () => {\n  const [loading, setLoading] = useState(false);\n  const [data, setData] = useState(null);\n  const [major, setMajor] = useState(null);\n  const [countdownTime, setCountdownTime] = useState(null);\n  const [isQuizStarted, setIsQuizStarted] = useState(false);\n  const [isQuizCompleted, setIsQuizCompleted] = useState(false);\n  const [resultData, setResultData] = useState(null);\n\n  const startQuiz = (data, countdownTime, major) => {\n    setLoading(true);\n    setCountdownTime(countdownTime);\n\n    setTimeout(() => {\n      setData(data);\n      setMajor(major);\n      setIsQuizStarted(true);\n      setLoading(false);\n    }, 2000);\n  };\n\n  const endQuiz = resultData => {\n    setLoading(true);\n\n    setTimeout(() => {\n      setIsQuizStarted(false);\n      setIsQuizCompleted(true);\n      setResultData(resultData);\n      setLoading(false);\n    }, 1000);\n  };\n\n  const replayQuiz = () => {\n    setLoading(true);\n\n    const shuffledData = shuffle(data);\n    shuffledData.forEach(element => {\n      element.options = shuffle(element.options);\n    });\n\n    setData(shuffledData);\n\n    setTimeout(() => {\n      setIsQuizStarted(true);\n      setIsQuizCompleted(false);\n      setResultData(null);\n      setLoading(false);\n    }, 1000);\n  };\n\n  const resetQuiz = () => {\n    setLoading(true);\n\n    setTimeout(() => {\n      setData(null);\n      setCountdownTime(null);\n      setIsQuizStarted(false);\n      setIsQuizCompleted(false);\n      setResultData(null);\n      setLoading(false);\n    }, 1000);\n  };\n\n  return (\n    <Layout>\n      {/*  TODO: redirect for authentication */}\n      {loading && <Loader />}\n      {!loading && !isQuizStarted && !isQuizCompleted && (\n        <Main startQuiz={startQuiz} />\n      )}\n      {!loading && isQuizStarted && (\n        <Quiz data={data} countdownTime={countdownTime} endQuiz={endQuiz} major={major} />\n      )}\n      {!loading && isQuizCompleted && (\n        <Result {...resultData} replayQuiz={replayQuiz} resetQuiz={resetQuiz} />\n      )}\n    </Layout>\n  );\n};\n\nexport default App;\n","import Swal from 'sweetalert2';\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service worker.'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              Swal.fire({\n                toast: 'true',\n                position: 'bottom',\n                icon: 'success',\n                title: 'App is ready to work offline.',\n                showConfirmButton: false,\n                timer: 6000\n              });\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App';\nimport * as serviceWorkerRegistration from './serviceWorkerRegistration';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\nserviceWorkerRegistration.register();\n"],"sourceRoot":""}